#!/bin/bash

################################################################################
# The functions here:
#  * are independent of the end user functions and all the variables set by an
# end user.
#  * do not assume any default arguments, all variables must be explicitly set.
#  * TODO: should those functions use end user variables?
#  * should not be invoked directly by an end user.
#  * are here to have higher test coverage.
#  * are supposed to be reused in many places. If a function concerns only 1
# project type, it should probably be in releaser main file. Unless keeping
# the function here will help you test it.
################################################################################

set -e

# Each log output goes to stderrr, so that we can return value from functions
# with stdout. (Curl does the same).

program_name() {
  echo "RELEASER"
}
log_debug() {
  if [ "$RELEASER_LOG_LEVEL" == "debug" ]; then
    echo -e "$(date "+%d-%m-%Y %T") $(program_name) debug: ${1}" >&2
  fi
}
log_info() {
  echo -e "$(date "+%d-%m-%Y %T") $(program_name) info: ${1}" >&2
}
log_error() {
  echo -e "\e[31m$(date "+%d-%m-%Y %T") $(program_name) error: $1\e[0m" >&2
  echo -e "\e[31m$(date "+%d-%m-%Y %T") $(program_name) error: File: ${BASH_SOURCE[0]}\e[0m" >&2
  echo -e "\e[31m$(date "+%d-%m-%Y %T") $(program_name) error: Line numbers: ${BASH_LINENO[*]}\e[0m" >&2
}
log_warn() {
  echo -e "\e[33m$(date "+%d-%m-%Y %T") $(program_name) warn: $1\e[0m" >&2
}

# In order to load all the releaser functions once you can run:
# releaser_loaded || eval "$(curl http://gogs.ai-traders.com/platform/releaser/raw/0.2.0/src/releaser)"
# Or you can simply wget that file and source it.
function releaser_loaded {
  return 0
}

# Arguments:
#   changelog_file
function get_last_version_from_changelog {
  changelog_file="$1"
  if [[ -z "${changelog_file}" ]];then
    log_error "changelog_file not set"
    return 1
  fi
  if [[ ! -f "${changelog_file}" ]];then
    log_error "${changelog_file} does not exist"
    return 1
  fi
  version=$(cat $changelog_file | head -1 | grep -o -e "[0-9]*\.[0-9]*\.[0-9]*")
  if [[ "${version}" == "" ]];then
    log_error "Could not get last version from ${changelog_file}"
    return 1
  fi
  echo "${version}"
}
# Arguments: none
function get_last_git_tagged_version {
  tag="$(git tag 2>&1 | sort -V | tail -1)"
  if [[ "${tag}" == *"Not a git repository"* ]];then
    log_error "Not a git repository"
    return 1
  fi
  echo "${tag}"
}

# function from: http://stackoverflow.com/a/21189044/4457564
# Arguments:
#  * path to yml file
#  * prefix so that imported settings all have a common prefix (which will reduce
# the risk of namespace collisions)
function parse_yaml {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}
# Arguments:
#   none, but oversion.yml must exist
function parse_oversion_file {
  oversion_file="oversion.yml"
  if [[ ! -f "${oversion_file}" ]];then
    log_error "${oversion_file} does not exist"
    return 1
  fi
  log_debug "Parsing ${oversion_file}"
  oversion_file_variables=$(parse_yaml "${oversion_file}" "OVERSION_")
  for oversion_file_variable in $oversion_file_variables; do
    # split the variable into name and value or else value will be quoted
    name=$(echo "${oversion_file_variable}" | cut -d '=' -f1)
    value=$(echo "${oversion_file_variable}" | cut -d '=' -f2)
    value=$(echo "$value" | sed -e 's/^"//' -e 's/"$//')
    export "${name}=${value}"
    log_debug "Exported variable: ${name}=${value}"
  done
  log_debug "Done parsing ${oversion_file}"
}

function get_next_version {
  parse_oversion_file
  exit_status="$?"
  if [[ "${exit_status}" != 0 ]]; then
    return "${exit_status}"
  fi
  if [[ "${OVERSION_backend}" == "consul" ]]; then
    if [[ -z "${OVERSION_consul_url}" ]]; then
      log_error "OVERSION_consul_url not set, set consul_url in oversion file"
      return 1
    fi
    if [[ -z "${OVERSION_project_name}" ]]; then
      log_error "OVERSION_project_name not set, set project_name in oversion file"
      return 1
    fi
    full_url="${OVERSION_consul_url}/v1/kv/projects/${OVERSION_project_name}/next_version?raw"
    next_version=$(curl -X GET --silent ${full_url})
    if [[ "${next_version}" == "" ]]; then
      log_error "Could not get next_version from Consul. Is it set? Is curl installed?"
      return 1
    fi
    log_info "Got next_version from Consul for ${OVERSION_project_name}: ${next_version}"
  else
    log_error "Not supported backend: ${OVERSION_backend}"
    return 1
  fi
  echo "${next_version}"
}
# Arguments:
#  * next_version
function set_next_version {
  next_version="$1"
  if [[ -z "${next_version}" ]]; then
    log_error "next_version not set"
    return 1
  fi
  parse_oversion_file
  if [[ "${OVERSION_backend}" == "consul" ]]; then
    if [[ -z "${OVERSION_consul_url}" ]]; then
      log_error "OVERSION_consul_url not set, set consul_url in oversion file"
      return 1
    fi
    if [[ -z "${OVERSION_project_name}" ]]; then
      log_error "OVERSION_project_name not set, set project_name in oversion file"
      return 1
    fi
    full_url="${OVERSION_consul_url}/v1/kv/projects/${OVERSION_project_name}/next_version"
    log_info "Set next_version into Consul: ${next_version}"
    output=$(curl -X PUT --silent --data ${next_version} ${full_url})
    if [[ "${output}" != "true" ]]; then
      log_error "Could not set next_version into Consul."
      return 1
    fi
  else
    log_error "Not supported backend: ${OVERSION_backend}"
    return 1
  fi
}
# Given the old_version in a SemVer format, e.g. 0.1.2, returns new version
# with patch fragment increased by 1, e.g. 0.1.3.
# Arguments:
#   old_version
function bump_patch_version {
  old_version="$1"
  if [[ -z "${old_version}" ]];then
    log_error "old_version not set"
    return 1
  fi
  log_debug "Validating old_version"
  validate_version_is_semver "${old_version}"

  #replace . with space so can split into an array
  version_bits=(${old_version//./\ })
  major=${version_bits[0]}
  minor=${version_bits[1]}
  patch=${version_bits[2]}

  patch=$((patch+1))
  echo "${major}.${minor}.${patch}"
}
# Arguments:
#   * version
function validate_version_is_semver {
  version="$1"
  if [[ -z "${version}" ]];then
    log_error "version not set"
    return 1
  fi
  if [[ ! "${version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
    log_error "Version was not SemVer. It was: ${version}. Must be e.g. 0.1.2"
    return 1
  fi
}

# Replaces the whole line in a version file with that line and adds new version.
# Arguments:
#   line_pattern
#   new_version
#   version_file
function locally_bump_version_in_versionfile {
  line_pattern="$1"
  if [[ -z "${line_pattern}" ]];then
    log_error "line_pattern not set"
    return 1
  fi
  new_version="$2"
  if [[ -z "${new_version}" ]];then
    log_error "new_version not set"
    return 1
  fi
  version_file="$3"
  if [[ -z "${version_file}" ]];then
    log_error "version_file not set"
    return 1
  fi
  if [[ ! -f "${version_file}" ]];then
    log_error "${version_file} does not exist"
    return 1
  fi
  new_versionfile_contents=$(sed "s/${line_pattern}.*/${line_pattern}\"${new_version}\"/g" ${version_file})
  log_debug "Will replace version file with:"
  log_debug "${new_versionfile_contents}"
  if [[ "${dryrun}" != "true" ]];then
    echo "${new_versionfile_contents}" > "${version_file}"
  fi
}

# Inserts the first line of changelog file: adds new version and date.
# Arguments:
#   new_version
#   changelog_file
function locally_bump_version_in_changelog {
  new_version="$1"
  changelog_file="$2"
  if [[ -z "${new_version}" ]];then
    log_error "new_version not set"
    return 1
  fi
  if [[ -z "${changelog_file}" ]];then
    log_error "changelog_file not set"
    return 1
  fi
  if [[ ! -f "${changelog_file}" ]];then
    log_error "${changelog_file} does not exist"
    return 1
  fi
  release_date=$(date +%Y-%b-%d)
  new_line="### ${new_version} (${release_date})"
  log_debug "Will add new line to changelog:"
  log_debug "${new_line}"
  if [[ "${dryrun}" != "true" ]];then
    old_changelog=$(cat "${changelog_file}")
    echo "${new_line}" > "${changelog_file}"
    echo "" >> "${changelog_file}"
    echo "${old_changelog}" >> "${changelog_file}"
    # this does not work, newline is not printed, eve with echo -e
    new_changelog="${new_line}\n${old_changelog}"
  fi
}

################################################################################
# End user functions
# The functions here:
#  * use default values set in releaser_init function
#  * use variables from releaserrc file
################################################################################

# You should invoke that function before running any end user functions.
function releaser_init {
  rls_changelog_file="$(pwd)/CHANGELOG.md"
  variables_file="$(pwd)/releaserrc"
  if [[ -f "${variables_file}" ]]; then
    source "${variables_file}"
  else
    log_warn "File: ${variables_file} does not exist, but it is ok."
  fi
  log_info "Current directory: $(pwd)"
  log_info "Changelog file: ${rls_changelog_file}"
}

# This function should be used in any project that does not use version file,
# e.g. ide docker image.
function verify_version_no_version_file {
  # Test that the version was not already released.
  version_from_changelog=$(get_last_version_from_changelog "${rls_changelog_file}")
  if git tag | grep "${version_from_changelog}"; then
    log_error "The last version from changelog was already git tagged: ${version_from_changelog}"
    exit 1
  fi
  version_from_oversion=$(get_next_version)
  if git tag | grep "${version_from_oversion}"; then
    log_error "The last version from oversion was already git tagged: ${version_from_oversion}"
    exit 1
  fi
  if [[ "${version_from_changelog}" != "${version_from_oversion}" ]]; then
    log_error "version_from_changelog: ${version_from_changelog} != version_from_oversion: ${version_from_oversion}"
    exit 1
  fi
  log_info "Version verified successfully"
}

function git_tag_from_oversion {
  new_version="$(get_next_version)"
  git tag "${new_version}" && git push origin "${new_version}"
}
function bump_changelog_and_oversion {
  new_version="$1"
  if [[ -z "${new_version}" ]];then
    # get next_version from Consul, which was last released
    old_version="$(get_next_version)"
    new_version="$(bump_patch_version ${old_version})"
  fi
  log_debug "Validating new_version"
  validate_version_is_semver "${new_version}"
  log_info "New version will be: ${new_version}"
  # set it locally
  # NO: locally_bump_version_in_versionfile "export this_image_tag=" "${new_version}" "${version_file}"
  locally_bump_version_in_changelog "${new_version}" "${rls_changelog_file}"
  log_info "Bumped to ${new_version} in ${rls_changelog_file}"
  # set it in Consul
  set_next_version "${new_version}"
}

################################################################################
# Common for ide docker image project type
################################################################################

function ide_docker_image_bump_old {
  new_version="$1"
  if [[ -z "${new_version}" ]];then
    # get next_version from Consul, which was last released
    old_version="$(get_next_version)"
    new_version="$(bump_patch_version ${old_version})"
  fi
  log_info "New version will be: ${new_version}"
  log_debug "Validating new_version"
  validate_version_is_semver "${new_version}"
  # set it locally
  locally_bump_version_in_versionfile "export this_image_tag=" "${new_version}" "${rls_version_file}"
  locally_bump_version_in_changelog "${new_version}" "${rls_changelog_file}"
  log_info "Bumped to ${new_version} in ${rls_version_file} and ${rls_changelog_file}"
  # set it in Consul
  set_next_version "${new_version}"
}
