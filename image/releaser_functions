#!/bin/bash

# The functions here:
#  * are independent of the main releaser file and of all the options set by an
# end user.
#  * does not assume any default arguments, all arguments must be explicitly set.
#  * should not be invoked directly by an end user.
#  * are here to have higher test coverage.

set -e

# Each log output goes to stderror, so that we can return value from functions
# with stdout. (Curl does the same).

log_debug() {
  if [ "$RELEASER_LOG_LEVEL" == "debug" ]; then
    echo -e "$(date "+%d-%m-%Y %T") RELEASER debug: ${1}" >&2
  fi
}
log_info() {
  echo -e "$(date "+%d-%m-%Y %T") RELEASER info: ${1}" >&2
}
log_error() {
  echo -e "\e[31m$(date "+%d-%m-%Y %T") RELEASER error: $1\e[0m" >&2
}
log_warn() {
  echo -e "\e[33m$(date "+%d-%m-%Y %T") RELEASER warn: $1\e[0m" >&2
}

# Arguments:
#   changelog_file
function get_last_version_from_changelog {
  changelog_file="$1"
  if [[ -z "${changelog_file}" ]];then
    log_error "changelog_file not set"
    return 1
  fi
  if [[ ! -f "${changelog_file}" ]];then
    log_error "${changelog_file} does not exist"
    return 1
  fi
  version=$(cat $changelog_file | head -1 | grep -o -e "[0-9]*\.[0-9]*\.[0-9]*")
  if [[ "${version}" == "" ]];then
    log_error "Could not get last version from ${changelog_file}"
    return 1
  fi
  echo "${version}"
}
# Arguments: none
function get_last_git_tagged_version {
  tag="$(git tag 2>&1 | sort -V | tail -1)"
  if [[ "${tag}" == *"Not a git repository"* ]];then
    log_error "Not a git repository"
    return 1
  fi
  echo "${tag}"
}

# function from: http://stackoverflow.com/a/21189044/4457564
# Arguments:
#  * path to yml file
#  * prefix so that imported settings all have a common prefix (which will reduce
# the risk of namespace collisions)
function parse_yaml {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}
# Arguments:
#   none, but oversion.yml must exist
function parse_oversion_file {
  oversion_file="oversion.yml"
  if [[ ! -f "${oversion_file}" ]];then
    log_error "${oversion_file} does not exist"
    return 1
  fi
  log_debug "Parsing ${oversion_file}"
  oversion_file_variables=$(parse_yaml "${oversion_file}" "OVERSION_")
  for oversion_file_variable in $oversion_file_variables; do
    # split the variable into name and value or else value will be quoted
    name=$(echo "${oversion_file_variable}" | cut -d '=' -f1)
    value=$(echo "${oversion_file_variable}" | cut -d '=' -f2)
    value=$(echo "$value" | sed -e 's/^"//' -e 's/"$//')
    export "${name}=${value}"
    log_debug "Exported variable: ${name}=${value}"
  done
  log_debug "Done parsing ${oversion_file}"
}

function get_next_version {
  parse_oversion_file
  if [[ "${OVERSION_backend}" == "consul" ]]; then
    if [[ -z "${OVERSION_consul_url}" ]]; then
      log_error "OVERSION_consul_url not set, set consul_url in oversion file"
      return 1
    fi
    if [[ -z "${OVERSION_project_name}" ]]; then
      log_error "OVERSION_project_name not set, set project_name in oversion file"
      return 1
    fi
    full_url="${OVERSION_consul_url}/v1/kv/projects/${OVERSION_project_name}/next_version?raw"
    next_version=$(curl -X GET -v ${full_url} 2>/dev/null)
    if [[ "${next_version}" == "" ]]; then
      log_error "Could not get next_version from Consul. Is it set? Is curl installed?"
      return 1
    fi
    log_info "next_version from Consul: ${next_version}"
  else
    log_error "Not supported backend: ${OVERSION_backend}"
    return 1
  fi
  echo "${next_version}"
}
# Given the old_version in a SemVer format, e.g. 0.1.2, returns new version
# with patch fragment increased by 1, e.g. 0.1.3.
# Arguments:
#   old_version
function bump_patch_version {
  old_version="$1"
  if [[ -z "${old_version}" ]];then
    log_error "old_version not set"
    return 1
  fi
  if [[ ! "${old_version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
    log_error "old_version was not SemVer. It was: ${old_version}. Must be e.g. 0.1.2"
    return 1
  fi

  #replace . with space so can split into an array
  version_bits=(${old_version//./\ })
  major=${version_bits[0]}
  minor=${version_bits[1]}
  patch=${version_bits[2]}

  patch=$((patch+1))
  echo "${major}.${minor}.${patch}"
}

# Replaces the whole line in a version file with that line and adds new version.
# Arguments:
#   line_pattern
#   new_version
#   version_file
function locally_bump_version_in_versionfile {
  line_pattern="$1"
  if [[ -z "${line_pattern}" ]];then
    log_error "line_pattern not set"
    return 1
  fi
  new_version="$2"
  if [[ -z "${new_version}" ]];then
    log_error "new_version not set"
    return 1
  fi
  version_file="$3"
  if [[ -z "${version_file}" ]];then
    log_error "version_file not set"
    return 1
  fi
  if [[ ! -f "${version_file}" ]];then
    log_error "${version_file} does not exist"
    return 1
  fi
  new_versionfile_contents=$(sed "s/${line_pattern}.*/${line_pattern}\"${new_version}\"/g" ${version_file})
  log_info "Will replace version file with:"
  log_info "${new_versionfile_contents}"
  if [[ "${dryrun}" != "true" ]];then
    echo "${new_versionfile_contents}" > "${version_file}"
  fi
}

# Inserts the first line of changelog file: adds new version and date.
# Arguments:
#   new_version
#   changelog_file
function locally_bump_version_in_changelog {
  new_version="$1"
  changelog_file="$2"
  if [[ -z "${new_version}" ]];then
    log_error "new_version not set"
    return 1
  fi
  if [[ -z "${changelog_file}" ]];then
    log_error "changelog_file not set"
    return 1
  fi
  if [[ ! -f "${changelog_file}" ]];then
    log_error "${changelog_file} does not exist"
    return 1
  fi
  release_date=$(date +%Y-%b-%d)
  new_line="### ${new_version} (${release_date})"
  log_info "Will add new line to changelog:"
  log_info "${new_line}"
  if [[ "${dryrun}" != "true" ]];then
    old_changelog=$(cat "${changelog_file}")
    echo "${new_line}" > "${changelog_file}"
    echo "" >> "${changelog_file}"
    echo "${old_changelog}" >> "${changelog_file}"
    # this does not work, newline is not printed, eve with echo -e
    new_changelog="${new_line}\n${old_changelog}"
  fi
}

# Replaces the whole line in a docker image version file with that line and adds new version.
# Arguments:
#   new_version
#   version_file
function locally_bump_version_in_versionfile_dockerimage {
  locally_bump_version_in_versionfile "export this_image_tag=" "$1" "$2"
}

################################################################################

function locally_bump_version_dockerimage {
  version_file="$1"
  changelog_file="$2"
  new_version="$3"
  if [[ -z "${new_version}" ]];then
    last_released_version=$(get_last_git_tagged_version)
    new_version="$(bump_patch_version ${last_released_version})"
  fi

  locally_bump_version_in_versionfile_dockerimage "${new_version}" "${version_file}"
  locally_bump_version_in_changelog "${new_version}" "${changelog_file}"
  log_info "Bumped to ${new_version} in ${version_file} and ${changelog_file}"
}

# Use this function if you want to test in a pipeline that the version was
# already bumped in code.
function verify_no_git_tag_for_latest_changelog_version {
  changelog_file="$1"
  version_from_changelog=$(get_last_version_from_changelog "${changelog_file}")
  if git tag | grep "${version_from_changelog}"; then
    log_error "The last version from changelog was already git tagged: ${version_from_changelog}"
    return 1
  fi
}

function docker_build {
  image_dir="$1"
  if [[ -z "${image_dir}" ]];then
    log_error "image_dir not set"
    return 1
  fi
  image_name="$2"
  if [[ -z "${image_name}" ]];then
    log_error "image_name not set"
    return 1
  fi
  image_tag="$3"
  if [[ -z "${image_tag}" ]];then
    # set to the latest git commit hash
    image_tag=$(git rev-parse HEAD)
  fi
  set -x
  cd "${image_dir}"
  docker build -t "${image_name}:${image_tag}" .

  echo "export AIT_DOCKER_IMAGE_NAME=\"${image_name}\"" > imagerc
  echo "export AIT_DOCKER_IMAGE_TAG=\"${image_tag}\"" >> imagerc

  echo "{ \"docker_image_name\":\"${image_name}\"," > imagerc.json
  echo "\"docker_image_tag\":\"${image_tag}\"," >> imagerc.json
  echo "\"docker_image_url\":\"${image_name}:${image_tag}\" }" >> imagerc.json

  echo "---" > imagerc.yml
  echo "docker_image_name: ${image_name}" >> imagerc.yml
  echo "docker_image_tag:${image_tag}" >> imagerc.yml
  echo "docker_image_url:${image_name}:${image_tag}" >> imagerc.yml

  if [[ "${dryrun}" != "true" ]];then
    docker push "${image_name}:${image_tag}"
  fi
  set +x
}
function docker_push {
  image_name="$1"
  if [[ -z "${image_name}" ]];then
    log_error "image_name not set"
    return 1
  fi
  image_tag="$2"
  if [[ -z "${image_tag}" ]];then
    log_error "image_tag not set"
    return 1
  fi
  testing_image_tag=$(git rev-parse HEAD)
  set -x
  docker tag "${image_name}:${testing_image_tag}" "${image_name}:${image_tag}"
  docker tag "${image_name}:${testing_image_tag}" "${image_name}:latest"
  if [[ "${dryrun}" != "true" ]];then
    docker push "${image_name}:${image_tag}"
    docker push "${image_name}:latest"
  fi
  set +x
}
