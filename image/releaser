#!/bin/bash

# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${DIR}/releaser_functions"
# TODO: ? source "${DIR}/releaser_version"

source "releaser-variables"

if [[ -z "${rls_project_type}" ]];then
  echo "fail! project_type not set"
  exit 1
fi
default_changelog_file="$(pwd)/CHANGELOG.md"
rls_changelog_file="${rls_changelog_file:-${default_changelog_file}}"

log_info "Project type: ${rls_project_type}"
log_info "Current directory: $(pwd)"
log_info "Changelog file: ${rls_changelog_file}"

command="$1"

set -e

# commands that work for each project type
case "${command}" in
get_next_version)
  get_next_version_from_oversion
  exit 0
  ;;
set_next_version)
  set_next_version_into_oversion "$2"
  exit 0
  ;;
esac

# commands that work for particular project type
case "${rls_project_type}" in
ide-docker-image)
    case "${command}" in
    bump)
        new_version="$2"
        if [[ -z "${new_version}" ]];then
          # get next_version from Consul, which was last released
          old_version="$(get_next_version_from_oversion)"
          new_version="$(bump_patch_version ${old_version})"
        fi
        log_debug "Validating new_version"
        validate_version_is_semver "${new_version}"
        log_info "New version will be: ${new_version}"
        # set it locally
        locally_bump_version_in_versionfile_dockerimage "${new_version}" "${rls_version_file}"
        locally_bump_version_in_changelog "${new_version}" "${rls_changelog_file}"
        log_info "Bumped to ${new_version} in ${rls_version_file} and ${rls_changelog_file}"
        # set it in Consul
        set_next_version_into_oversion "${new_version}"
        exit 0
        ;;
    verify_version)
        # Test that the version was not already released.
        version_from_changelog=$(get_last_version_from_changelog "${rls_changelog_file}")
        if git tag | grep "${version_from_changelog}"; then
          log_error "The last version from changelog was already git tagged: ${version_from_changelog}"
          exit 1
        fi
        version_from_oversion=$(get_next_version_from_oversion)
        if git tag | grep "${version_from_oversion}"; then
          log_error "The last version from oversion was already git tagged: ${version_from_oversion}"
          exit 1
        fi
        log_info "Version verified successfully"
        exit 0
        ;;
    build)
        docker_build "${rls_image_dir}" "${rls_image_name}" # no image tag set
        exit 0
        ;;
    release)
        new_version="$(get_next_version_from_oversion)"
        git tag "${new_version}" && git push origin "${new_version}"
        exit 0
        ;;
    publish)
        new_version="$(get_next_version_from_oversion)"
        docker_push "${rls_image_name}" "${new_version}"
        exit 0
        ;;
    help)
        echo "Available commands: bump, verify_version, build, release, publish"
        exit 0
        ;;
    *)
        echo "Invalid command: '${command}'"
        exit 1
        ;;
    esac
    exit 0
    ;;
*)
    echo "Invalid project_type: '${project_type}'"
    exit 1
    ;;
esac
